<?xml version="1.0"?>

<!--
TODO:
* not all UTF are cought by check.pl - do it.
* do a validity check on all jsp, xml and html files in the repository.
* stop the svn thingy running all the time even when there was no change.
* check version of tomcat to be 5.5 (exit otherwise).
* print hour when build starts and ends.
	use information to be placed in version.htm
* testing (get to fixup of all the tests - all tests should pass).
* local deploy + local undeploy should delete old data.
* local config tomcat (add user).
* google API key to be generated as part of setup.
* compilation via jasper and the compile target of the tomcat remote deployer (see the tomcat remote deployer distribution documentation for help).
* Verification of the war file (make sure that no unresolved classes exist).
* XML validity check of all XMLs with DTD or Schemas (if there are any to be found).
* All text files must be ISO 8859-1 plain text files with no CRLF and eol on last line.
* add a check that forces into a specific operating system for a developer.
-->

<project name="wellsphere" default="build">
	<!-- reading the properties file -->
	<!-- xmlproperty file="local_properties.xml" semanticAttributes="true"/-->
	<property file="local.properties"/>
	<xmlproperty file="build_common_properties.xml" semanticAttributes="true"/>
	<!-- lets define some paths (source, various jar paths) -->
	<path id="source-path">
		<pathelement path="model/java"/>
		<pathelement path="content-entry/src"/>
		<pathelement path="web/java"/>
		<pathelement path="web/test"/>
		<pathelement path="model/test"/>
	</path>
	<!-- all jars -->
	<path id="external-jars">
		<fileset dir="elib">
			<include name="*.jar"/>
		</fileset>
	</path>
	<!-- jars which are needed for compilation from various sources -->
	<path id="compilation-jars">
		<fileset dir="elib">
			<include name="junit-4.1.jar"/>
			<include name="jmock-1.1.0.jar"/>
			<include name="httpunit.jar"/>
		</fileset>
	</path>
	<!-- these jars are used to execute tomcat tasks and are from the tomcat distribution -->
	<path id="tomcat-jars">
		<fileset dir="elib">
			<include name="catalina-ant.jar"/>
			<include name="commons-el.jar"/>
			<include name="jasper-compiler.jar"/>
			<include name="jsp-api.jar"/>
			<include name="servlet-api.jar"/>
			<include name="catalina.jar"/>
			<include name="bootstrap.jar"/>
		</fileset>
	</path>
	<!-- these jars are from the ant deployer package -->
	<path id="tomcat-deployer-jars">
		<fileset dir="elib">
			<include name="catalina-deployer.jar"/>
			<include name="commons-logging.jar"/>
			<include name="jasper-runtime.jar"/>
			<include name="servlet-api.jar"/>
		</fileset>
	</path>
	<!-- these jars are used by ant for tasks which are not part of ant core -->
	<!-- they come from a variety of sources: tomcat, svn and mysql -->
	<path id="ant-jars">
		<fileset dir="elib">
			<include name="catalina-ant.jar"/>
			<include name="mysql-connector-java-5.0.5-bin.jar"/>
			<include name="svnant.jar"/>
			<include name="svnClientAdapter.jar"/>
			<include name="javasvn.jar"/>
			<include name="svnjavahl.jar"/>
			<include name="dbunit-2.2.jar"/>
		</fileset>
	</path>
	<!-- these jars came from the java distribution -->
	<path id="java-jars">
		<fileset dir="elib">
			<include name="tools.jar"/>
		</fileset>
	</path>
	<!-- these jars are whats needed for the contententry application -->
	<fileset id="app-contententry-jars" dir="elib">
		<include name="asm.jar"/>
		<include name="cglib-2.1.1.jar"/>
		<include name="common-annotations.jar"/>
		<include name="commons-beanutils-1.7.0.jar"/>
		<include name="commons-collections.jar"/>
		<include name="commons-digester.jar"/>
		<include name="commons-fileupload-1.1.1.jar"/>
		<include name="commons-io-1.2.jar"/>
		<include name="commons-logging.jar"/>
		<include name="dom4j-1.6.1.jar"/>
		<include name="el-api.jar"/>
		<include name="el-ri.jar"/>
		<include name="jboss-serialization.jar"/>
		<include name="jdom.jar"/>
		<include name="joda-time-1.3.jar"/>
		<include name="jsf-api.jar"/>
		<include name="jsf-facelets.jar"/>
		<include name="jsf-impl.jar"/>
		<include name="log4j.jar"/>
		<include name="stax-1.2.0.jar"/>
		<include name="tomahawk-1.1.3.jar"/>
		<include name="xml-writer-0.2.jar"/>
		<include name="xom-1.1.jar"/>
		<include name="xpp3-1.1.3.4.O.jar"/>
		<include name="xstream-1.2.1.jar"/>
	</fileset>
	<!-- these jars are whats needed for the web application -->
	<fileset id="app-web-jars" dir="elib">
		<include name="activation.jar"/>
		<include name="apache-solr-1.2-dev.jar"/>
		<include name="commons-beanutils-1.7.0.jar"/>
		<include name="commons-codec.jar"/>
		<include name="commons-collections.jar"/>
		<include name="commons-dbcp-1.2.2.jar"/>
		<include name="commons-digester.jar"/>
		<include name="commons-fileupload-1.1.1.jar"/>
		<include name="commons-httpclient.jar"/>
		<include name="commons-io-1.2.jar"/>
		<include name="commons-lang-2.3.jar"/>
		<include name="commons-logging.jar"/>
		<include name="commons-pool-1.3.jar"/>
		<include name="ehcache-1.2.4.jar"/>
		<include name="freemarker.jar"/>
		<include name="ibatis-common-2.jar"/>
		<include name="ibatis-dao-2.jar"/>
		<include name="ibatis-sqlmap-2.jar"/>
		<include name="jcaptcha-all-1.0-RC6.jar"/>
		<include name="jdom.jar"/>
		<include name="joda-time-1.3.jar"/>
		<include name="jstl.jar"/>
		<include name="log4j.jar"/>
		<include name="lucene-snowball-2.1.0.jar"/>		
		<include name="lucene-core-2.1.0.jar"/>
		<include name="lucene-highlighter-2.1.0.jar"/>
		<include name="mail.jar"/>
		<include name="mysql-connector-java-5.0.5-bin.jar"/>
		<include name="rome-0.9.jar"/>
		<include name="solr-client.jar"/>
		<include name="spring.jar"/>
		<include name="spring-mock.jar"/>
		<include name="standard.jar"/>
		<include name="struts.jar"/>
		<include name="urlrewrite-2.6.0.jar"/>
		<include name="xpp3-1.1.3.4.O.jar"/>
		<include name="VideoEgg.jar"/>
	</fileset>
	<!-- define ant tasks which are not part of the ant core distribution -->
	<taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="ant-jars"/>
	<taskdef name="tc-deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="ant-jars"/>
	<taskdef name="tc-list" classname="org.apache.catalina.ant.ListTask" classpathref="ant-jars"/>
	<taskdef name="tc-reload" classname="org.apache.catalina.ant.ReloadTask" classpathref="ant-jars"/>
	<taskdef name="tc-resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="ant-jars"/>
	<taskdef name="tc-roles" classname="org.apache.catalina.ant.RolesTask" classpathref="ant-jars"/>
	<taskdef name="tc-start" classname="org.apache.catalina.ant.StartTask" classpathref="ant-jars"/>
	<taskdef name="tc-stop" classname="org.apache.catalina.ant.StopTask" classpathref="ant-jars"/>
	<taskdef name="tc-undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="ant-jars"/>
	<taskdef name="tc-validate" classname="org.apache.catalina.ant.ValidatorTask" classpathref="ant-jars"/>
	<taskdef name="tc-serverinfo" classname="org.apache.catalina.ant.ServerinfoTask" classpathref="ant-jars"/>
	<taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="ant-jars"/>
	<!-- OK. Here come the targets -->
	<target name="check_mysql" depends="" description="Check mysql is correct">
		<echo>The following should say ${ws.db.version}</echo>
		<echo>If it doesn't then you are using the wrong version of mysql</echo>
		<echo>This will be enforced in the future</echo>
		<!-- version="${ws.db.version}" -->
		<sql driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}" print="true">
			<classpath>
				<pathelement location="${ws.db.driver_jar}"/>
			</classpath>
			select version();
		</sql>
	</target>
	<target name="check_ant" depends="" description="Check correct version of ant is used">
		<echo>checking that your ant is the right (${ws.ant_version}) version</echo>
		<fail message="Please install ant ${ws.ant_version}, other versions will not work">
			<condition>
				<not>
					<contains string="${ant.version}" substring="${ws.ant_version}"/>
				</not>
			</condition>
		</fail>
	</target>
	<target name="check_java" depends="" description="Check correct version of java is used">
		<echo>ant java version is ${ant.java.version}</echo>
		<fail message="Please install java ${ws.compile.java_version}. We only work with that version">
			<condition>
				<not>
					<contains string="${ant.java.version}" substring="${ws.compile.java_version}"/>
				</not>
			</condition>
		</fail>
		<echo>The following should say java version "${ws.compile.java_version}"</echo>
		<echo>If it doesn't - please switch java versions. This will be</echo>
		<echo>enforced in a couple of days</echo>
		<exec executable="java" failonerror="yes">
			<arg value="-version"/>
		</exec>
	</target>
	<target name="ant-setup" depends="check_ant" description="Add ant runtime libs that we use">
		<copy todir="${ant.home}/lib" verbose="true">
			<fileset dir="elib">
				<include name="mysql-connector-java-5.0.5-bin.jar"/>
				<include name="catalina-ant.jar"/>
				<include name="svnant.jar"/>
				<include name="svnClientAdapter.jar"/>
				<include name="javasvn.jar"/>
				<include name="svnjavahl.jar"/>
			</fileset>
		</copy>
	</target>
	<target name="ant-unsetup" depends="check_ant" description="Remove ant runtime libs that we use">
		<delete verbose="true">
			<fileset dir="${ant.home}/lib">
				<include name="mysql-connector-java-5.0.5-bin.jar"/>
				<include name="catalina-ant.jar"/>
				<include name="svnant.jar"/>
				<include name="svnClientAdapter.jar"/>
				<include name="javasvn.jar"/>
				<include name="svnjavahl.jar"/>
			</fileset>
		</delete>
	</target>
	<target name="init" depends="check_ant,check_java,check_mysql" description="Init build process">
	</target>
	<target name="javadoc" depends="init" description="Create all javadocs">
		<javadoc destdir="${ws.compile.javadoc.dir}" verbose="false" sourcepathref="source-path" classpathref="external-jars"/>
	</target>
	<target name="compile" depends="init" description="Compile main source tree java files into class files, generate jar files">
		<mkdir dir="${ws.compile.build.dir}"/>
		<javac destdir="${ws.compile.build.dir}" source="${ws.compile.java_version}" target="${ws.compile.java_version}" debug="true" deprecation="false" optimize="false" failonerror="true">
			<src refid="source-path"/>
			<classpath refid="external-jars"/>
			<!--compilerarg value="-Xlint:all"/-->
			<!--compilerarg value="-Xlint:deprecation"/-->
			<!--compilerarg value="-Xlint:unchecked"/-->
		</javac>
	</target>
	<target name="war-contententry" depends="compile,revision" description="Build content entry war">
		<mkdir dir="${ws.compile.dist.dir}"/>
		<war destfile="${ws.compile.dist.war-contententry}" webxml="content-entry/web/WEB-INF/web.xml">
			<lib refid="app-contententry-jars">
			</lib>
			<classes dir="${ws.compile.build.dir}"/>
			<fileset dir="content-entry/web"/>
		</war>
	</target>
	<target name="war-web" depends="compile,revision" description="Build web war file">
		<delete dir="${ws.compile.temp.dir}"/>
		<mkdir dir="${ws.compile.temp.dir}"/>
		<copy toDir="${ws.compile.temp.dir}">
			<fileset dir="web/webapp/" includes="**/*.xml"/>
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.ExpandProperties"/>
			</filterchain>
		</copy>
		<mkdir dir="${ws.compile.dist.dir}"/>
		<war destfile="${ws.compile.dist.war-web}" webxml="temp/WEB-INF/web.xml">
			<lib refid="app-web-jars">
			</lib>
			<classes dir="${ws.compile.build.dir}"/>
			<classes dir="model/java" includes="**/*.xml"/>
			<classes dir="model/java" includes="**/*.properties"/>
			<classes dir="web/java" includes="**/*.xml"/>
			<classes dir="web/java" includes="**/*.properties"/>
			<fileset dir="web/webapp" excludes="**/*.xml"/>
			<fileset dir="temp"/>
		</war>
	</target>
	<target name="wars" depends="war-contententry,war-web" description="Make all wars"/>
	<target name="build" depends="wars" description="Build the entire system"/>
	<target name="clean" depends="" description="Clean output dirs (build, dist)">
		<delete dir="${ws.compile.dist.dir}"/>
		<delete dir="${ws.compile.javadoc.dir}"/>
		<delete dir="${ws.compile.build.dir}"/>
		<delete dir="${ws.compile.temp.dir}"/>
		<delete dir="${ws.test.output.dir}"/>
		<delete dir="web/webapp/WEB-INF/src"/>
		<delete file="web/webapp/WEB-INF/generated_web.xml"/>
	</target>
	<target name="remote-check" depends="" description="Check the remote tomcat">
		<echo>not implemented yet</echo>
	</target>
	<target name="remote-serverinfo" depends="" description="Show tomcat version">
		<tc-serverinfo url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}"/>
	</target>
	<target name="remote-deploy-web" depends="" description="Install web application">
		<tc-deploy url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}" path="${ws.compile.dist.path-web}" war="${ws.compile.dist.war-web}"/>
	</target>
	<target name="remote-deploy-contententry" depends="" description="Install web application">
		<tc-deploy url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}" path="${ws.compile.dist.path-contententry}" war="${ws.compile.dist.war-contententry}"/>
	</target>
	<target name="remote-deploy-all" depends="remote-deploy-web,remote-deploy-contententry" description="Deploy all applications"/>
	<target name="remote-reload-web" depends="" description="Reload web application">
		<tc-reload url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}" path="${ws.compile.dist.path-web}"/>
	</target>
	<target name="remote-reload-contententry" depends="" description="Reload web application">
		<tc-reload url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}" path="${ws.compile.dist.path-contententry}"/>
	</target>
	<target name="remote-reload-all" depends="remote-reload-web,remote-reload-contententry" description="Reload all applications"/>
	<target name="remote-undeploy-web" depends="" description="Remove web application">
		<tc-undeploy url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}" path="${ws.compile.dist.path-web}"/>
	</target>
	<target name="remote-undeploy-contententry" depends="" description="Remove web application">
		<tc-undeploy url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}" path="${ws.compile.dist.path-contententry}"/>
	</target>
	<target name="remote-undeploy-all" depends="remote-undeploy-web,remote-undeploy-contententry" description="Undeploy all applications"/>
	<target name="remote-list" depends="" description="List applications on the Tomcat">
		<tc-list url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}"/>
	</target>
	<target name="remote-resources" depends="" description="List resources on the Tomcat">
		<tc-resources url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}"/>
	</target>
	<target name="remote-start" depends="" description="Start the application server">
		<tc-start url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}"/>
	</target>
	<target name="remote-stop" depends="" description="Stop the application server">
		<tc-stop url="${ws.runtime.url}" username="${ws.runtime.username}" password="${ws.runtime.password}"/>
	</target>
	<target name="db-init" depends="" description="Create the database itself. No scheme or data">
		<sql driver="${ws.db.driver}" url="${ws.db.curl}" userid="${ws.db.admin_user}" password="${ws.db.admin_pass}">
			<classpath>
				<pathelement location="${ws.db.driver_jar}"/>
			</classpath>
			DROP DATABASE IF EXISTS ${ws.db.name};
			REVOKE ALL PRIVILEGES, GRANT OPTION FROM ${ws.db.user};
			DROP USER ${ws.db.user};
			CREATE USER ${ws.db.user} IDENTIFIED by '${ws.db.pass}';
			CREATE DATABASE ${ws.db.name};
			GRANT ALL PRIVILEGES ON ${ws.db.name}.* TO '${ws.db.user}'@'%';
		</sql>
	</target>
	<target name="db-drop-schema" depends="" description="Drop all defined tables and procedures">
		<sql driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}">
			<classpath>
				<pathelement location="${ws.db.driver_jar}"/>
			</classpath>
			<transaction src="model/modeling/WellnetCommunityProceduresDrop.sql"/>
			<transaction src="model/modeling/WellnetCommunityFunctionsDrop.sql"/>
			<!--transaction src="model/modeling/PlacesExtraTablesDrop.sql"/-->
			<transaction src="model/modeling/WellnetCommunitySchemaDrop.sql"/>
		</sql>
	</target>
	<target name="db-show-status" depends="" description="Show all tables, procedures and functions in the db">
		<sql driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}" print="true">
			<classpath>
				<pathelement location="${ws.db.driver_jar}"/>
			</classpath>
			SHOW TABLES;
			SHOW PROCEDURE STATUS;
			SHOW FUNCTION STATUS;
		</sql>
	</target>
	<target name="db-create-empty" depends="db-drop-schema" description="Create db with schema only">
		<sql driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}" delimiter="//" delimitertype="row" keepformat="yes">
			<classpath>
				<pathelement location="${ws.db.driver_jar}"/>
			</classpath>
			<transaction src="model/modeling/WellnetCommunityProcedures.sql"/>
		</sql>
		<sql driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}">
			<classpath>
				<pathelement location="${ws.db.driver_jar}"/>
			</classpath>
			<transaction src="model/modeling/WellnetCommunityFunctions.sql"/>
			<transaction src="model/modeling/WellnetCommunitySchema.sql"/>
			<!--transaction src="model/modeling/PlacesExtraTables.sql"/-->
		</sql>
	</target>
	<target name="db-create-essential" depends="db-create-empty" description="Create db with essential data">
		<sql driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}">
			<classpath>
				<pathelement location="${ws.db.driver_jar}"/>
			</classpath>
			<transaction src="model/modeling/WellnetCommunityEssential.sql"/>
			<transaction src="model/modeling/PlacesEssential.sql"/>
		</sql>
	</target>
	<target name="db-create-sample" depends="db-create-essential" description="Create db with sample data">
		<sql driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}">
			<classpath>
				<pathelement location="${ws.db.driver_jar}"/>
			</classpath>
			<transaction src="model/modeling/WellnetCommunitySample.sql"/>
			<transaction src="model/modeling/PlacesSample1.sql"/>
			<transaction src="model/modeling/PlacesSample2.sql"/>
			<transaction src="model/modeling/PlacesSample3.sql"/>
			<transaction src="model/modeling/PlacesSample4.sql"/>
			<transaction src="model/modeling/EventSample1.sql"/>
		</sql>
	</target>
	<target name="db-create-live" depends="db-create-empty" description="Create snapshot of the live data">
		<sql driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}">
			<classpath>
				<pathelement location="${ws.db.driver_jar}"/>
			</classpath>
			<transaction src="model/modeling/WellnetLive.sql"/>
		</sql>
	</target>
	<target name="db-old-create-mysql" depends="" description="Create db from scratch using command line mysql executable">
		<exec executable="mysql" input="model/modeling/WellnetCommunityProceduresDrop.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
		</exec>
		<exec executable="mysql" input="model/modeling/WellnetCommunityProcedures.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
			<arg value="--delimiter=//"/>
		</exec>
		<exec executable="mysql" input="model/modeling/WellnetCommunitySchemaDrop.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
		</exec>
		<exec executable="mysql" input="model/modeling/WellnetCommunitySchema.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
		</exec>
		<exec executable="mysql" input="model/modeling/WellnetCommunityEssential.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
		</exec>
		<exec executable="mysql" input="model/modeling/WellnetCommunitySample.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
		</exec>
		<exec executable="mysql" input="model/modeling/PlacesSample1.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
		</exec>
		<exec executable="mysql" input="model/modeling/PlacesSample2.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
		</exec>
		<exec executable="mysql" input="model/modeling/PlacesSample3.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
		</exec>
		<exec executable="mysql" input="model/modeling/PlacesSample4.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="--database=${ws.db.name}"/>
			<arg value="--batch"/>
			<arg value="--show-warnings"/>
		</exec>

	</target>
	<target name="db-dump-mysql" depends="db-create-sample" description="Create a dump of the database">
		<exec executable="mysqldump" output="dump.sql" failonerror="yes">
			<arg value="--user=${ws.db.user}"/>
			<arg value="--password=${ws.db.pass}"/>
			<arg value="${ws.db.name}"/>
		</exec>
	</target>
	<target name="db-dump-dbunit-all" depends="db-create-sample" description="Create an xml dump of the database in xml format">
		<dbunit driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}">
			<export dest="export.xml"/>
		</dbunit>
	</target>
	<target name="db-clean-dbunit" depends="" description="Clean the entire database via db-unit">
		<dbunit driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}">
			<operation type="DELETE_ALL"/>
		</dbunit>
	</target>
	<target name="db-dump-dbunit-places" depends="" description="Export places data to XML file">
		<dbunit driver="${ws.db.driver}" url="${ws.db.durl}" userid="${ws.db.user}" password="${ws.db.pass}">
			<export dest="places.xml" format="flat">
				<table name="zip_zip_map"/>
				<table name="survey_answer_survey_choice"/>
				<table name="survey_choice"/>
				<table name="survey_answer"/>
				<table name="survey_question"/>
				<table name="survey_question_group"/>
				<table name="survey_choice_group"/>
				<table name="survey"/>
				<table name="rating"/>
				<table name="question_type"/>
				<table name="geo_cache"/>
				<table name="location_hour"/>
				<table name="bookmark"/>
				<table name="business_location"/>
				<table name="location"/>
				<table name="business"/>
				<table name="vendor"/>
				<table name="business_type"/>
			</export>
		</dbunit>
	</target>
	<target name="revision" depends="" description="Create the html revision stamp file">
		<svn>
			<status revisionProperty="revision" textStatusProperty="revision_text" path="${basedir}"/>
		</svn>
	</target>
	<target name="test" depends="build" description="Run all tests">
		<mkdir dir="${ws.test.output.dir}"/>
		<junit printsummary="yes" haltonfailure="no">
			<classpath refid="external-jars"/>
			<classpath>
				<pathelement path="classes"/>
				<pathelement path="web/test"/>
				<pathelement path="model/test"/>
				<pathelement path="."/>
			</classpath>
			<formatter type="brief" usefile="false"/>
			<formatter type="xml"/>
			<formatter type="plain"/>
			<batchtest fork="yes" todir="${ws.test.output.dir}">
				<fileset dir="web/test">
					<include name="**/*Test*.java"/>
					<exclude name="**/Abstract*"/>
				</fileset>
				<fileset dir="model/test">
					<include name="**/*Test*.java"/>
					<exclude name="**/AllTests.java"/>
					<exclude name="**/Abstract*"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	<target name="cruisecontrol" depends="clean,db-create-sample,build,ch-deploy" description="Target meant to be run by cruise control"/>
	<target name="local-check" depends="" description="Check that local tomcat is available">
		<available file="${ws.runtime.webapps_home}" type="dir" property="webapps_home_available"/>
		<fail message="webapps_home not available: ${ws.runtime.webapps_home}" unless="webapps_home_available"/>
	</target>
	<target name="local-stop">
		<echo>Attempting to stop a Tomcat process from ${ws.runtime.catalina_home}</echo>
		<java jar="${ws.runtime.bootstrap}" fork="true">
			<jvmarg value="-Dcatalina.home=${ws.runtime.catalina_home}"/>
			<arg line="stop"/>
		</java>
	</target>
	<target name="local-start" depends="local-check" description="Start local tomcat">
		<echo>Attempting to spawn a Tomcat process from ${ws.runtime.catalina_home}</echo>
		<java jar="${ws.runtime.bootstrap}" fork="true" spawn="true">
			<jvmarg value="-Dcatalina.home=${ws.runtime.catalina_home}"/>
		</java>
	</target>
	<target name="local-clean" depends="local-stop" description="Clean current deployment from local tomcat">
		<delete dir="${ws.runtime.webapps_home}/webapps/${ws.compile.dist.path-web}"/>
		<delete dir="${ws.runtime.webapps_home}/webapps/${ws.compile.dist.path-contententry}"/>
		<delete file="${ws.runtime.webapps_home}/webapps/${ws.compile.dist.war-web-name}"/>
		<delete file="${ws.runtime.webapps_home}/webapps/${ws.compile.dist.war-contententry-name}"/>
	</target>
	<target name="local-deploy" depends="local-check" description="Deploy to local tomcat">
		<copy todir="${ws.runtime.webapps_home}/webapps" verbose="true">
			<fileset dir="${ws.compile.dist.dir}" includes="**/*.war"/>
		</copy>
	</target>
	<target name="ch-check" depends="" description="Check that CATALINA_HOME is set and is a directory">
		<property environment="env"/>
		<property name="catalina_home" value="${env.CATALINA_HOME}"/>
		<fail message="$CATALINA_HOME not set" unless="catalina_home"/>
		<available file="${catalina_home}" type="dir" property="catalina_home_available"/>
		<fail message="$CATALINA_HOME not available: ${catalina_home}" unless="catalina_home_available"/>
		<available file="${catalina_home}/webapps" type="dir" property="catalina_home_available"/>
		<fail message="$CATALINA_HOME/webapps not available: ${catalina_home}/webapps" unless="catalina_home_available"/>
	</target>
	<target name="ch-deploy" depends="ch-check,build" description="Deploy via CATALINA_HOME">
		<delete dir="${catalina_home}/webapps/${ws.compile.dist.war-deploy-web}" />
		<delete dir="${catalina_home}/webapps/${ws.compile.dist.war-deploy-contententry}" />
		<copy todir="${catalina_home}/webapps" verbose="true">
			<fileset dir="${ws.compile.dist.dir}" includes="**/*.war"/>
		</copy>
	</target>
	<target name="ch-clean" depends="ch-check" description="Clean via CATALINAE_HOME">
		<delete dir="${catalina_home}/webapps/${ws.compile.dist.war-deploy-web}"/>
		<delete dir="${catalina_home}/webapps/${ws.compile.dist.war-deploy-contententry}"/>
		<delete file="${catalina_home}/webapps/${ws.compile.dist.war-web-name}"/>
		<delete file="${catalina_home}/webapps/${ws.compile.dist.war-contententry-name}"/>
	</target>
	<target name="ch-undeploy" depends="ch-clean" description="Undeploy via CATALINAE_HOME"/>
	<target name="ch-deploy-jsp" depends="ch-check" description="Deploy only JSPs via CATALINA_HOME">
		<copy todir="${catalina_home}/webapps/${ws.compile.dist.path-web}">
			<fileset dir="web/webapp" includes="**/*.jsp"/>
			<fileset dir="web/webapp" includes="**/*.tag"/>
			<fileset dir="web/webapp" includes="images/**/*"/>
			<fileset dir="web/webapp" includes="css/**/*"/>
			<fileset dir="web/webapp" includes="js/**/*"/>
		</copy>
	</target>
	<target name="do_all" depends="clean,build,db-create-sample,remote-undeploy-all,remote-deploy-all" description="Do everything from scratch">
	</target>
	 <target name="jspc" depends="" description="Compile jsps using jasper">
		<taskdef classname="org.apache.jasper.JspC" name="jasper2">
			<classpath id="jspc.classpath">
				<pathelement location="elib/tools.jar"/>
				<pathelement location="elib/bootstrap.jar"/>
				<pathelement location="elib/jasper-compiler.jar"/>
				<pathelement location="elib/jasper-runtime.jar"/>
				<pathelement location="elib/servlet-api.jar"/>
				<pathelement location="elib/commons-logging.jar"/>
				<pathelement location="elib/commons-el.jar"/>
				<pathelement location="elib/jsp-api.jar"/>
				<pathelement location="elib/standard.jar"/>
				<pathelement location="elib/jstl.jar"/>
			</classpath>
		</taskdef>
		<jasper2
			validateXml="false"
			uriroot="web/webapp"
			webXmlFragment="web/webapp/WEB-INF/generated_web.xml"
			outputDir="web/webapp/WEB-INF/src"
			/>
	</target>
</project>
